//commandprocessorstest.Java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import manfrinmarco.core.CommandProcessor;
import manfrinmarco.core.GameContext;
import manfrinmarco.entities.Player;
import manfrinmarco.items.Inventory;
import manfrinmarco.items.Item;
import manfrinmarco.items.ItemType;
import manfrinmarco.map.Room;

public class CommandProcessorTest {

    private CommandProcessor processor;
    private GameContext contextMock;
    private Player playerMock;
    private Room roomMock;
    private Inventory inventoryMock;

    @BeforeEach
    public void setup() {
        processor = new CommandProcessor();

        contextMock = mock(GameContext.class);
        playerMock = mock(Player.class);
        roomMock = mock(Room.class);
        inventoryMock = mock(Inventory.class);

        when(contextMock.getPlayer()).thenReturn(playerMock);
        when(contextMock.getCurrentRoom()).thenReturn(roomMock);
        when(playerMock.getInventory()).thenReturn(inventoryMock);

        // Override GameContext singleton with mock (optional if you can refactor GameContext)
        GameContext originalContext = GameContext.getInstance();
        originalContext.setPlayer(playerMock);
        originalContext.setCurrentRoom(roomMock);
    }

    @Test
    public void testShowStatusCommand() {
        when(playerMock.getHealth()).thenReturn(80);
        processor.processCommand("stato");

        verify(playerMock, times(1)).getHealth();
    }

    @Test
    public void testPickItemCommand() {
        Item mockItem = mock(Item.class);
        when(mockItem.getName()).thenReturn("Spada");
        when(roomMock.getItems()).thenReturn(java.util.List.of(mockItem));

        processor.processCommand("prendi Spada");

        verify(inventoryMock).addItem(mockItem);
        verify(roomMock).removeItem(mockItem);
    }

    @Test
    public void testEquipItemCommand() {
        Item mockItem = mock(Item.class);
        when(mockItem.getName()).thenReturn("Elmo");
        when(inventoryMock.iterator()).thenReturn(java.util.List.of(mockItem).iterator());

        processor.processCommand("equip Elmo");

        verify(playerMock).equip(mockItem);
    }

    @Test
    public void testUsePotionCommand() {
        Item potion = new Item("Pozione", ItemType.POTION, 0);
        when(inventoryMock.iterator()).thenReturn(java.util.List.of(potion).iterator());

        processor.processCommand("usa Pozione");

        verify(playerMock).heal(anyInt());
        verify(inventoryMock).removeItem(potion);
    }
}

//enemyfactorytest.java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;

import manfrinmarco.entities.Enemy;
import manfrinmarco.entities.EnemyFactory;
import manfrinmarco.security.GameException;

public class EnemyFactoryTest {

    @Test
    public void testCreateKnownEnemy() {
        Enemy goblin = EnemyFactory.createEnemy("goblin");
        assertNotNull(goblin);
        assertEquals("Goblin", goblin.getName());
        assertTrue(goblin.getHealth() > 0);
    }

    @Test
    public void testCreateUnknownEnemyThrowsException() {
        Exception exception = assertThrows(GameException.class, () -> {
            EnemyFactory.createEnemy("drago");
        });
        assertTrue(exception.getMessage().contains("Nemico non trovato"));
    }

    @Test
    public void testCreateCaseInsensitive() {
        Enemy enemy = EnemyFactory.createEnemy("SKELETON");
        assertEquals("Scheletro", enemy.getName());
    }
}

//enemytest.java
import manfrinmarco.entities.Enemy;
import manfrinmarco.entities.AggressiveStrategy;
import manfrinmarco.entities.Player;
import manfrinmarco.items.Item;
import manfrinmarco.items.ItemType;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class EnemyTest {
    @Test
    public void testEnemyTakesDamage() {
        Enemy enemy = new Enemy("Goblin", 30, new AggressiveStrategy());
        enemy.takeDamage(10);
        assertEquals(20, enemy.getHealth());
    }

    @Test
    public void testEnemyIsAlive() {
        Enemy enemy = new Enemy("Goblin", 1, new AggressiveStrategy());
        assertTrue(enemy.isAlive());

        enemy.takeDamage(1);
        assertFalse(enemy.isAlive());
    }

    @Test
    public void testSetAndGetDropItem() {
        Enemy enemy = new Enemy("Goblin", 30, new AggressiveStrategy());
        Item drop = new Item("Chiave", ItemType.KEY);
        enemy.setDrop(drop);

        assertNotNull(enemy.getDrop());
        assertEquals("Chiave", enemy.getDrop().getName());
    }

    @Test
    public void testStrategyAttackDoesNotCrash() {
        Enemy enemy = new Enemy("Goblin", 30, new AggressiveStrategy());
        Player player = new Player("Eroe", 100);
        enemy.executeStrategy(player);
        assertTrue(player.getHealth() < 100);
    }
}

//gamepersistancetest


import java.io.File;

import org.junit.jupiter.api.AfterEach;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import manfrinmarco.core.GameContext;
import manfrinmarco.core.GameStateMemento;
import manfrinmarco.entities.Player;
import manfrinmarco.io.GameFileManager;
import manfrinmarco.items.Inventory;
import manfrinmarco.map.Room;

public class GamePersistenceTest {

    private static final String SAVE_FILE = "savegame.dat";

    @BeforeEach
    public void setUp() {
        // ensure no leftover file
        File f = new File(SAVE_FILE);
        if (f.exists()) f.delete();
    }

    @AfterEach
    public void tearDown() {
        File f = new File(SAVE_FILE);
        if (f.exists()) f.delete();
    }

    @Test
    public void testSaveAndLoadMemento_preservesState() {
        GameContext context = GameContext.getInstance();
        // configure a simple state
        Player player = new Player("Tester", 50);
        Inventory inv = new Inventory();
        player.setInventory(inv);
        context.setPlayer(player);
        Room room = new Room("TestRoom", "A room for testing");
        context.setCurrentRoom(room);
        context.increaseScore(10);

        // take a snapshot and save
        GameStateMemento memento = new GameStateMemento(context);
        GameFileManager.saveMemento(memento);

        // modify context to ensure load actually resets
        context.getPlayer().heal(-30); // reduce HP to 20
        context.setCurrentRoom(new Room("Another", "Different"));
        context.increaseScore(5);

        // load back
        GameStateMemento loaded = GameFileManager.loadMemento();
        assertNotNull(loaded, "Loaded memento should not be null");
        GameContext restored = loaded.getSnapshot();

        // verify fields match original snapshot
        assertEquals(50, restored.getPlayer().getHealth(), "Player HP should be restored");
        assertEquals("TestRoom", restored.getCurrentRoom().getName(), "Current room should be restored");
        assertEquals(10, restored.getScore(), "Score should be restored");
    }

    @Test
    public void testLoadMemento_whenNoFile_returnsNull() {
        GameStateMemento loaded = GameFileManager.loadMemento();
        assertNull(loaded, "Loading with no save file should return null");
    }
}

//inventarytest.java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import manfrinmarco.items.Inventory;
import manfrinmarco.items.Item;
import manfrinmarco.items.ItemType;

public class InventaryTest {
    private Inventory inventory;
    private Item sword;
    private Item potion;

    @BeforeEach
    public void setUp() {
        inventory = new Inventory();
        sword = new Item("Spada", ItemType.WEAPON, 10);
        potion = new Item("Pozione", ItemType.POTION, 0);
    }

    @Test
    public void testAddItem() {
        inventory.addItem(sword);
        assertTrue(inventory.iterator().hasNext());
    }

    @Test
    public void testRemoveItem() {
        inventory.addItem(potion);
        inventory.removeItem(potion);
        assertFalse(inventory.iterator().hasNext());
    }

    @Test
    public void testInventoryContainsItems() {
        inventory.addItem(sword);
        inventory.addItem(potion);

        int count = 0;
        for (Item item : inventory) {
            count++;
            assertTrue(item.getName().equals("Spada") || item.getName().equals("Pozione"));
        }
        assertEquals(2, count);
    }
}

//itemFactoryTest.java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;

import manfrinmarco.items.Item;
import manfrinmarco.items.ItemFactory;
import manfrinmarco.items.ItemType;

public class ItemFactoryTest {

    @Test
    void testCreateValidItem() {
        Item item = ItemFactory.create("pozione");
        assertNotNull(item);
        assertEquals("Pozione Curativa", item.getName());
        assertEquals(ItemType.POTION, item.getType());
    }

    @Test
    void testCreateInvalidItemThrowsException() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            ItemFactory.create("non_esiste");
        });
        assertTrue(exception.getMessage().contains("Item non trovato"));
    }
}

//playerTest.java


import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import manfrinmarco.entities.AggressiveStrategy;
import manfrinmarco.entities.Enemy;
import manfrinmarco.entities.Player;
import manfrinmarco.items.Item;
import manfrinmarco.items.ItemType;

public class PlayerTest {

    private Player player;

    @BeforeEach
    public void setUp() {
        player = new Player("Eroe", 100);
    }

    @Test
    public void testPlayerTakesDamageWithoutArmor() {
        player.takeDamage(30);
        assertEquals(70, player.getHealth());
    }

    @Test
    public void testPlayerTakesDamageWithArmor() {
        Item armor = new Item("Armatura Test", ItemType.ARMOR, 10);
        player.equip(armor);
        player.takeDamage(30);
        assertEquals(80, player.getHealth()); // 30 - 10 = 20 damage
    }

    @Test
    public void testPlayerHeals() {
        player.takeDamage(50);
        player.heal(30);
        assertEquals(80, player.getHealth());
    }

    @Test
    public void testPlayerAttackWithWeapon() {
        Enemy enemy = new Enemy("Dummy", 100, new AggressiveStrategy());
        Item weapon = new Item("Spada", ItemType.WEAPON, 15);
        player.equip(weapon);
        player.attack(enemy);
        assertTrue(enemy.getHealth() <= 90); // base 10 + 15 = 25
    }
}